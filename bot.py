import logging
import time
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, Message
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

BOT_TOKEN = "7933076784:AAE5rdtnxL44MBKCeC-xH7sA90dqN_VWTqk"
GROUP_ID = -1002317640685

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
message_user_map = {}  # group_msg_id -> (user_id, number)
user_number_map = {}   # user_id -> number
user_rating_map = {}   # user_id -> rating
user_history_map = {}  # user_id -> list of (number, time, start_time)
user_queue_map = {}    # user_id -> queue position
user_placed_map = {}   # user_id -> set of placed numbers (–Ω–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
waiting_for_number = set()  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_admin(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        chat_administrators = await context.bot.get_chat_administrators(GROUP_ID)
        admins_ids = [admin.user.id for admin in chat_administrators]
        return user_id in admins_ids
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∞: {e}")
        return False

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"),
            InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –Ω–æ–º–µ—Ä–æ–≤", callback_data="history"),
            InlineKeyboardButton("–û—á–µ—Ä–µ–¥—å", callback_data="queue"),
            InlineKeyboardButton("–†–µ–π—Ç–∏–Ω–≥", callback_data="rating"),
            InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def return_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"),
            InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –Ω–æ–º–µ—Ä–æ–≤", callback_data="history"),
            InlineKeyboardButton("–û—á–µ—Ä–µ–¥—å", callback_data="queue"),
            InlineKeyboardButton("–†–µ–π—Ç–∏–Ω–≥", callback_data="rating"),
            InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)

# –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä
async def handle_submit_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79001112233):")
    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –Ω–æ–º–µ—Ä
    user_id = update.callback_query.from_user.id
    waiting_for_number.add(user_id)

# –ò—Å—Ç–æ—Ä–∏—è
async def handle_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.callback_query.from_user.id
    history = user_history_map.get(user_id, [])
    if not history:
        await update.callback_query.edit_message_text("üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    history_text = "\n".join([f"{item[0]} - {item[1]} —á–∞—Å–æ–≤ (–ø–æ—Å—Ç–∞–≤–ª–µ–Ω {item[2]})" for item in history])
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await update.callback_query.edit_message_text(f"üìú –ò—Å—Ç–æ—Ä–∏—è –Ω–æ–º–µ—Ä–æ–≤:\n{history_text}", reply_markup=InlineKeyboardMarkup(keyboard))

# –û—á–µ—Ä–µ–¥—å
async def handle_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.callback_query.from_user.id
    queue_pos = user_queue_map.get(user_id, "–í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.")
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await update.callback_query.edit_message_text(f"üìä –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å: {queue_pos}", reply_markup=InlineKeyboardMarkup(keyboard))

# –†–µ–π—Ç–∏–Ω–≥
async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.callback_query.from_user.id
    rating = user_rating_map.get(user_id, 0.20)
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await update.callback_query.edit_message_text(f"‚≠ê –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {rating}", reply_markup=InlineKeyboardMarkup(keyboard))

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
async def handle_referral(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_text("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä)
async def handle_user_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in waiting_for_number:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text("‚ùó –î–ª—è —Å–¥–∞—á–∏ –Ω–æ–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–¥–∞—Ç—å –Ω–æ–º–µ—Ä' –≤ –º–µ–Ω—é.")
        return

    number = update.message.text.strip()

    if not number.startswith('+') or not number[1:].isdigit():
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79001112233).")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–ª–µ–Ω
    if user_id in user_placed_map and number in user_placed_map[user_id]:
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä.")
        return

    user_number_map[user_id] = number
    queue_pos = len(user_queue_map) + 1
    user_queue_map[user_id] = queue_pos

    sent_msg = await context.bot.send_message(
        chat_id=GROUP_ID,
        text=f"üì≤ –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: {number}\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–¥–æ–º –∏–ª–∏ —Ñ–æ—Ç–æ."
    )

    message_user_map[sent_msg.message_id] = (user_id, number)

    current_time = int(time.time())
    user_history_map.setdefault(user_id, []).append((number, 0, current_time))

    user_rating_map.setdefault(user_id, 0.20)

    # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    waiting_for_number.remove(user_id)

    await update.message.reply_text("‚úÖ –ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥ –æ—Ç –≥—Ä—É–ø–ø—ã.")

# –û—Ç–≤–µ—Ç—ã –≤ –≥—Ä—É–ø–ø–µ
async def handle_group_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply = update.message.reply_to_message
    if not reply or reply.message_id not in message_user_map:
        return

    user_id, number = message_user_map[reply.message_id]

    if not await is_admin(update.message.from_user.id, context):
        return

    keyboard = [
        [
            InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–æ–¥", callback_data="repeat"),
            InlineKeyboardButton("‚úÖ –ü–æ—Å—Ç–∞–≤–∏–ª –Ω–æ–º–µ—Ä", callback_data="placed")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message.photo:
        await context.bot.send_photo(
            chat_id=user_id,
            photo=update.message.photo[-1].file_id,
            reply_markup=reply_markup
        )
    elif update.message.text:
        await context.bot.send_message(
            chat_id=user_id,
            text=update.message.text,
            reply_markup=reply_markup
        )
    else:
        await context.bot.send_message(chat_id=user_id, text="–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç, –Ω–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    number = user_number_map.get(user_id)
    if not number:
        await query.edit_message_text("–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä.")
        return

    if query.data == "repeat":
        msg = await context.bot.send_message(
            chat_id=GROUP_ID,
            text=f"üîÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –Ω–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞: {number}\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        message_user_map[msg.message_id] = (user_id, number)
        await query.edit_message_text("üîÅ –ó–∞–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.")
    elif query.data == "placed":
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        if user_id in user_queue_map:
            del user_queue_map[user_id]

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–º–µ—Ä–∞
        current_time = int(time.time())
        for i, (num, hours, start_time) in enumerate(user_history_map.get(user_id, [])):
            if num == number:
                user_history_map[user_id][i] = (num, hours, current_time)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        user_placed_map.setdefault(user_id, set()).add(number)

        await query.edit_message_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, handle_user_number))
    app.add_handler(MessageHandler(filters.REPLY & filters.Chat(GROUP_ID), handle_group_reply))
    app.add_handler(CallbackQueryHandler(handle_submit_number, pattern="^submit_number$"))
    app.add_handler(CallbackQueryHandler(handle_history, pattern="^history$"))
    app.add_handler(CallbackQueryHandler(handle_queue, pattern="^queue$"))
    app.add_handler(CallbackQueryHandler(handle_rating, pattern="^rating$"))
    app.add_handler(CallbackQueryHandler(handle_referral, pattern="^referral$"))
    app.add_handler(CallbackQueryHandler(return_to_main_menu, pattern="^main_menu$"))
    app.add_handler(CallbackQueryHandler(handle_button, pattern="^(repeat|placed)$"))

    app.run_polling()

if __name__ == "__main__":
    main()
